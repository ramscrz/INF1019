ALUNORAFAELCRUZ - 1221020

QUESTÃO 1) Faça um programa para criar dois processos
que se comunicam via pipe. O Pai lê do pipe
enquanto o filho escreve no pipe. Exiba o resultado
do que foi escrito e lido.

-----------------------------------------------------

ex01.c

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>

#define TEXT_SIZE 400

int main() {

   int fd[2];
   int pid = 0, i = 0, nRx = 0, nTx = 0;

   char *messages[] = {"Aoi", "Kuroi", "Shiroi", "Shotsu", "Kotoba", "Daigakusei"};

   char receivedText[TEXT_SIZE], message[TEXT_SIZE];

   if(pipe(fd) < 0) {

      printf("\nErro na aberture de pipe.\n");
      exit(-1);

   }

   if(fork() > 0) {

      close(fd[1]);

      for(i = 0; i < 6; i++) {
         nRx = read(fd[0], receivedText, strlen(messages[i]) + 1);
         printf("\n%d dados lidos: %s\n", nRx, receivedText);
      }

      while(i < 11) {

         nRx = read(fd[0], receivedText, TEXT_SIZE);
         printf("\n%d dados lidos: %s\n\n", nRx, receivedText);
         i++;
      }

   } else {

      close(fd[0]);

      for(i = 0; i < 6; i++) {
         nTx = write(fd[1], messages[i], strlen(messages[i]) + 1);
         printf("\n%d dados escritos: %s\n\n", nTx, messages[i]);
      }

      while(i < 11) {

         scanf("%[^\n]%*c", message);

         nTx = write(fd[1], message, strlen(message) + 1);
         printf("\n%d dados escritos: %s\n", nTx, message);

         i++;
      }

   }

 	 close(fd[0]); close(fd[1]);

   return 0;
}

-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex01 ex01.c
$ ./ex01

-----------------------------------------------------

RESULTADO

4 dados lidos: Aoi
4 dados escritos: Aoi


6 dados escritos: Kuroi


7 dados escritos: Shiroi


7 dados escritos: Shotsu


7 dados escritos: Kotoba



6 dados lidos: Kuroi
11 dados escritos: Daigakusei


7 dados lidos: Shiroi

7 dados lidos: Shotsu

7 dados lidos: Kotoba

11 dados lidos: Daigakusei
Hello world!

13 dados escritos: Hello world!

13 dados lidos: Hello world!

That's a message for you

25 dados escritos: That's a message for you

25 dados lidos: That's a message for you

I study Japanese


17 dados escritos: I study Japanese
17 dados lidos: I study Japanese

This is probably the last sentence.

36 dados escritos: This is probably the last sentence.

36 dados lidos: This is probably the last sentence.

See you

8 dados escritos: See you

8 dados lidos: See you


-----------------------------------------------------

CONCLUSÃO

O código desenvolvido possui uma única função main responsável por criar um processo filho e estabelecer a comunicação entre os processos utilizando um pipe fd. fork() é utilizado para criar o processo filho. O processo pai deve ler os dados escritos no pipe pelo processo filho. Então, o processo pai fecha o descritor fd[1] e deixa fd[0] aberto para habilitar a leitura do processo pai no pipe fd. O processo filho fecha o descritor fd[0] e deixa fd[1] aberto para habilitar a escrita do processo filho no pipe fd.

nRx = read(fd[0], receivedText, strlen(messages[i]) + 1);

read é utilizada para ler a mensagem, de tamanho strlen(messages[i]) + 1, do pipe utilizando o descritor fd[0] e armazenando a string lido em receivedText. O programa imprime receivedtext e a quantidade de caractéres lidos nRx. Primeiro o processo pai lê 6 strings do pipe, as strings em messages. Em seguida, ele lê strings que são capturadas no processo filho através de scanf. 5 strings são lidas do pipe, strings que são capturadas por scanf no processo filho.

nTx = write(fd[1], messages[i], strlen(messages[i]) + 1);

write é utilizada para escrever a mensagem messages[i], de tamanho strlen(messages[i]) + 1, do pipe utilizando o descritor fd[1]. O programa imprime messages[i], a mensagem escrita no pipe, e a quantidade de caractéres escritos nTx. Primeiro o processo filho escreve 6 strings no pipe, as strings em messages. Em seguida, ele escreve strings que são capturadas através de scanf. 5 strings são escritas no pipe, strings que são capturadas por scanf nesse mesmo processo.

O resultado observado é o resultado esperado. As strings escritas no pipe por um processo são corretamente lidas pelo outro processo, conforme observado pelo resultado.

Os descritores fd[0] e fd[1] são fechados no fim do programa utilizando a função close.

-----------------------------------------------------

QUESTÃO 2)  Faça um programa para redirecionar a entrada
e a saída, lendo os dados de um arquivo e
gerando a saída em outro.

-----------------------------------------------------

ex02.c

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>

int main() {

   int fIn, fOut, i = 0;
   char tmp;

   if( (fIn = open("input", O_RDONLY | O_CREAT,0666)) == -1) {

      perror("\nErro em open()\n");
      return -1;

   }

   if( (fOut = open("output", O_WRONLY | O_CREAT | O_TRUNC,0666)) == -1) {

      perror("\nErro em open()\n");
      return -2;

   }

   close(0);

   if(dup(fIn) == -1) {

      perror("\nErro em dup() para redirecionar a entrada stdin\n");
      return -3;

   }

   if(dup2(fOut, 1) == -1) {

      perror("\nErro em dup2() para redirecionar a saída stdout\n");
      return -4;
   }

   do {
      scanf("%c", &tmp);
      printf("%c", tmp);
   } while(tmp != '\n');

   close(fIn);
   close(fOut);

   return 0;
}


-----------------------------------------------------

input

Ashita wa ii hi ni naru. Kimi no namae wa... tabun ke-ki ga arimasen.


-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex02 ex02.c
$ ./ex02

-----------------------------------------------------

RESULTADO (arquivo output gerado pelo programa ex02)

Ashita wa ii hi ni naru. Kimi no namae wa... tabun ke-ki ga arimasen.

-----------------------------------------------------

CONCLUSÃO

O código fonte possui uma única função main que duplica os descritores de arquivo fIn e fOut para que fIn seja usado como o descritor 0 (stdin) d processo e i descritor fOut seja usado como descritor 1 (stdout) do processo. A duplicação e utilização dos descritores fIn e fOut para stdin e stdout, respectivamente, do processo pode ser realizada pela função dup(int fd) ou pela função dup2(int fd1, int fd2), ambas semelhantes. No caso da dup, o descritor duplicado é armazenado no descritor de menor número não utilizado (fechado) do processo corrente. No caso da dup2(int fd1, int fd2), o descritor fd1 é armazenado no descritor fd2 do processo corrente. Isso permite redirecionar meio de entrada e saída, no caso stdin e stdout do processo corrente.

A chamada close(0) fecha o descritor 0 (stdin) do processo corrente. Em seguida, dup(fIn) duplica FIn e armazena o duplicado de fIn no descritor fechado de menor número do processo corrente, nesse caso descritor 0 (stdin) do processo corrente (devido a chamada anterior close(0)). Assim, fIn passa a ser o descritor de entrada do processo corrente e toda entrada ocorre a partir de fIn. No caso, fIn é um arquivo "input" que possui um texto e foi aberto por open() que utiliza a flag O_RDONLY para indicar que o descritor está associado a um arquivo para leitura apenas. Toda leitura do processo corrente será feita a partir do conteúdo do arquivo "input" de descritor fIn (devido a close(0) e dup(fIn)). O descritor fOut está associado a outro arquivo "output" onde devem ser armazenadas as saídas do programa dado que dup2(fOut, 1) foi executado. dup2(fOut, 1) duplica o descritor fOut e armazena esse descritor no descritor 1 (stdout) do processo corrente. Assim, todas as saídas do processo corrente são redirecionadas ao arquivo "output" de descritor fOut. O descritor fOut é criado a partir de open() utilizando a flag O_WRONLY dado que fOut será descritor de stdout e deve apenas escrever.

No caso de dup2, o descritor 1 não precisa ser fechado porque dup2 possui um segundo parâmetro que indica qual descritor do processo corrente será subtituído pelo novo descritor.

do {
      scanf("%c", &tmp);
      printf("%c", tmp);
   } while(tmp != '\n');

Esse código é responsável por fazer a leitura do conteúdo da entrada (descritor fIn, logo arquivo "input"), char a char até encontrar quebra de linha \n. Cada char lido é impresso na saída (descritor fOut, logo arquivo "output"). Então o conteúdo de "input" deve ser lido por scanf até encontrar um \n e o printf seguinte deve imprimir na saída (descritor fOut, arquivo "output") o char lido. Assim, o conteúdo do arquivo "input" deve ser copiado para o arquivo "output" até a primeira ocorrência de \n no conteúdo do arquivo "input". Portanto, o resultado obtido está de acordo com o esperado.

O_RDONLY é a flag que indica que o arquivo é de leitura apenas.
O_WRONLY é a flag que indica que o arquivo é de escrita apenas.

De fato, um arquivo é utilizado como stdin e o outro como stdout, então o arquivo para entrada deve apenas ler e o arquivo de saída deve apenas escrever.

-----------------------------------------------------

QUESTÃO 3) Faça um programa para criar um pipe e
executar dois processos que são utilitários do Unix
que se comuniquem através do pipe criado (a shell
faz isso).

-----------------------------------------------------

ex03.c

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

int main() {

   int fd[2];
   int pid = 0, i = 0;

   char *progOneArgs[] = {"/bin/grep", "test", NULL};
   char *progTwoArgs[] = {"/bin/ls", NULL};

   if(pipe(fd) < 0) {

      printf("\nErro na abertura de pipe.\n");
      exit(-1);

   }

   if(fork() > 0) {

      close(fd[1]);

      if(dup2(fd[0], 0) == -1) {
         perror("\nErro em dup2() para redirecionar a entrada stdin\n");
         return -1;
      }

      execv(progOneArgs[0], progOneArgs);

   } else {

      close(fd[0]);

      if(dup2(fd[1], 1) == -1) {
         perror("\nErro em dup2() para redirecionar a saída stdout\n");
         return -2;
      }

      execv(progTwoArgs[0], progTwoArgs);

   }

   return 0;
}


-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex03 ex03.c
$ ./ex03

-----------------------------------------------------

RESULTADO

fivetest
fourtest
test
test_one
test_three
test_two

-----------------------------------------------------

CONCLUSÂO

O código fonte do arquivo ex03.c possui apenas a função main que estabelece a comunicação entre os processos utilitários ls e grep utilizando um pipe e dup2 para definir os descritores de entrada (stdin) e de saída (stdout) dos processos. 

fork() é utilizado para criar um processo filho. O processo filho deve escrever no pipe fd (descritor fd[1] aberto e fd[0] fechado para escrita) e o processo pai deve ler o que o processo filho escreveu no pipe fd (descritor fd[0] fechado e fd[1] aberto para leitura). O processo filho executa o utilitário ls e o processo pai executa o processo grep com argumento "test". 

char *progOneArgs[] = {"/bin/grep", "test", NULL};
char *progTwoArgs[] = {"/bin/ls", NULL};

progOneArgs descreve os argumentos do programa grep.
progTwoArgs descreve os argumentos do programa ls.

A execução desses processos deve funcionar de forma semelhante à "ls | grep test", listando todos os resultados de ls que possuem o termo "test". O processo ls é o processo filho que escreve o retorno de ls no pipe fd. O processo pai é o processo grep que lê do pipe o retorno de ls e executa utilizando o valor lido. Então grep recebe uma lista dos arquivos do diretório e retorna os arquivos cujo nome contém a string "test". Para o teste, foram criados os arquivos fivetest, fourtest, test, test_one, test_three, test_two. Então esses arquivos devem ser o retorno do programa. O pipe estabelece a comunicação entre os processos ls e grep (ls escreve no pipe e grep lê do pipe). A dup2 foi utilizada exatamente como explicado na questão 2.

dup2(fd[0], 0) duplica o descritor fd[0] e armazena-o no descritor 0 (stdin) do processo pai, responsável pela leitura. Logo, a leitura no processo pai ocorre a partir do pipe fd.

dup2(fd[1], 1) duplica o descritor fd[1] e armazena-o no descritor 1 (stdout) do processo filho, responsável pela escrita. Logo, a escrita no processo filho ocorre no pipe fd.

execv foi utilizada para executar os programas utilitários grep e ls. O primeiro parâmetro deve ser o caminho do programa. E todos os parâmetros devem terminar em NULL (NULL terminated).

O resultado obtido está de acordo com o esperado.

-----------------------------------------------------

